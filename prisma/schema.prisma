// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Employee {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email              String             @unique
    password           String
    name               String
    birthDate          DateTime           @db.Date
    address            String
    phoneNumber        String
    sex                String             @db.Char(1)
    hashedRefreshToken String?
    division           Division           @relation("Division", fields: [idDivision], references: [idDivision])
    idDivision         String             @unique
    miningSchedule     EmployeeOnMining[]
    MiningAssets       MiningAssets[]

    @@map("employees")
}

model Division {
    idDivision String   @id
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    name      String
    employees Employee[] @relation("Division")

    @@map("division")
}

model LegalLetter {
    idLetter  Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    companyName String
    city String
    endedAt String
    startedAt String
    address    String
    status     LetterStatus
    type       LetterType
    detail     String

    @@map("legal_letter")
}

enum LetterType {
    masuk
    keluar
}

enum LetterStatus {
    selesai
    dalam_proses
    ditolak
}

enum DivisionName {
    legal
    marketing
    hrd
    finance
    mining
    rnd
}

model LegalContract {
    idContract Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    contractName   String
    fileAttachment String
    details        String

    @@map("legal_contract")
}

model MiningSchedule {
    idSchedule Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    startDate DateTime
    endDate   DateTime
    activity  String
    description String
    status    String
    employee  EmployeeOnMining[]

    @@map("mining_schedule")
}

model EmployeeOnMining {
    employeeId Int @unique
    employee   Employee       @relation(fields: [employeeId], references: [id])
    scheduleId Int
    schedule   MiningSchedule @relation(fields: [scheduleId], references: [idSchedule])

    healthSurvey HealthSurvey? 
    toolSurvey ToolSurvey?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([employeeId, scheduleId])
    @@map("employee_on_mining")
}

model MiningAssets {
    idAsset   Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    lastUsedById   Int
    lastUsedBy     Employee @relation(fields: [lastUsedById], references: [id])
    fileAttachment String
    details        String

    @@map("mining_assets")
}

model HealthSurvey {
    id   Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pusing Boolean
    demam Boolean
    batuk Boolean
    sehat Boolean

    idEmployee Int @unique
    employeeOnMining EmployeeOnMining @relation(fields: [idEmployee], references: [employeeId])

    @@map("mining_health_survey")
}

model ToolSurvey {
    id   Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    hasGoogles Boolean
    hasGloves Boolean
    hasVest Boolean
    hasHelmet Boolean

    idEmployee Int @unique
    employeeOnMining EmployeeOnMining @relation(fields: [idEmployee], references: [employeeId])

    @@map("mining_tool_survey")
}

model Customer{
    idCust Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    username    String @unique
    email       String @unique

    company     Company_Marketing  @relation(fields: [idCompany], references: [IdComp])
    idCompany   Int

    @@unique([idCompany])
    @@map("marketing_customer")
}     

model Company_Marketing {
    IdComp Int @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name        String 
    phoneNumber String 
    address     String
    about String 
    message String
    customer    Customer?

    @@map("marketing_company_marketing")
}


model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  amount             Int
  price              String
  seller_name        String
  note               String
  receipt            String
  type               String        

  @@map("transactions")
}

model Project {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name               String
  lab_name           String
  person_responsible String
  status             String
  general            General @relation(fields: [idGeneral], references: [id])
  idGeneral          Int
  dataAnalysis       DataAnalysis?
  
  @@unique([idGeneral])
  @@map("rnd_project")
}

model DataAnalysis {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  result             String
  storage            String
  person_responsible String
  category           String
  project            Project @relation(fields: [idProject], references: [id])
  idProject          Int

  @@unique([idProject])
  @@map("rnd_data_analysis")
}

model General {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  timestamp         DateTime
  activity_update   String
  location          String
  project_count     Int
  money_total       Int
  day_total         Int
  project           Project?
  @@map("rnd_general")
}

// model Research {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   division  DivisionName
//   name      String
// }
